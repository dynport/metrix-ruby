#!/usr/bin/env ruby
$:.push(File.expand_path("../../lib", __FILE__))
require "time"
require "metrix"
require "metrix/elastic_search"
require "metrix/graphite"
require "metrix/mongodb"
require "syslog/logger"
require "optparse"

Metrix.logger = Syslog::Logger.new("metrix")

metrics = []
interval = 10
graphite_host = nil
opts = OptionParser.new do |o|
  o.on("--mongodb") do
    metrics << :mongodb
  end

  o.on("--es") do
    metrics << :es
  end

  o.on("--graphite-host HOST") do |value|
    graphite_host = value
  end
end

opts.parse(ARGV)

if graphite_host.nil?
  puts "ERROR: graphite-host is required"
  abort opts.to_s
end

started = Time.now
graphite = Graphite.new(graphite_host, 2003)
cnt = 0
while true
  begin
    cnt += 1
    now = Time.now.utc
    if metrics.include?(:es)
      Metrix.logger.info "fetching elasticsearch metrix"
      Metrix::ElasticSearch.from_uri("http://127.0.0.1:9200/_status").metrics.each do |k, v|
        graphite << "elastic_search.#{k} #{v} #{now.to_i}"
      end
    end

    if metrics.include?(:mongodb)
      Metrix.logger.info "fetching mongodb metrix"
      Metrix::Mongodb.from_uri("http://127.0.0.1:28017/serverStatus").metrics.each do |k, v|
        graphite << "mongodb.#{k} #{v} #{now.to_i}"
      end
    end
    graphite.flush
    diff = Time.now - now
    Metrix.logger.info "finished run in %.06f" % [diff]
  rescue SystemExit
    exit
  rescue => err
    logger.error "#{err.message}"
    logger.error "#{err.backtrace.inspect}"
  ensure
    sleep interval - (Time.now - started - cnt * interval)
  end
end
